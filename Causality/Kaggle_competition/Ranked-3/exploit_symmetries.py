import data_io
import pandas as pd


def index_rename(idx):
    return "r" + str(idx)

def reverse(X, y, info, direction):
    y = y.copy()
    X = X.copy()
    idx = y[y['Target']==-direction]


    #print len(idx)

    y = y.ix[idx.index]
    y['Target'] = direction

    X = X.ix[idx.index]
    info = info.ix[idx.index]

    # reverse columns
    X.columns = ['B', 'A']
    X = X[['A', 'B']]
    info.columns = ['B type', 'A type']
    info = info[['A type', 'B type']]

    X = X.rename(index = index_rename)
    y = y.rename(index = index_rename)
    info = info.rename(index = index_rename)

    print "Data to be appended", X.shape,y.shape, direction
    return X,y,info


def exploit_symmetries(X, y, info):

    reversed_values = [reverse(X,y,info,0), reverse(X,y,info,1), reverse(X,y,info,-1)]

    for data in reversed_values:
        X = X.append(data[0])
        y = y.append(data[1])
        info = info.append(data[2])
    return X,y, info


def main():

    X = data_io.read_train_pairs()
    y = data_io.read_train_target()
    info = data_io.read_train_info()


    X,y, info = exploit_symmetries(X,y, info)
    print X.shape, y.shape
    print "-1", len(y[y['Target']==-1])
    print "0", len(y[y['Target']==0])
    print "1", len(y[y['Target']==1])

    # X = X.iloc[:10]
    # y = y.iloc[:10]
    # info = info.iloc[:10]

    data_io.save_train_data(X, "./Competition/CEfinal_train_pairs-sym.csv")
    data_io.save(y, "./Competition/CEfinal_train_target-sym.csv")
    data_io.save(info, "./Competition/CEfinal_train_publicinfo-sym.csv")
    print "finished"


if __name__=="__main__":
    main()
